---
- hosts: localhost
  gather_facts: no
  module_defaults:
    group/aws:
      region: "us-east-2"
  tasks:
    - name: Create VPC
      ec2_vpc_net:
        name: image-gallery-vpc-m5
        cidr_block: 10.0.0.0/16
        tags:
          Name: image-gallery-vpc-m5
        state: present
      register: vpc
    - name: debug
      debug: var=vpc
    - name: Create Public Subnet 1
      ec2_vpc_subnet:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Name: ig-public-sn1-m5
        cidr: 10.0.1.0/24
        state: present
      register: publicSubnet1
    - name: debug
        debug: var=publicSubnet1
    - name: Create Public Subnet 2
        ec2_vpc_subnet:
          vpc_id: "{{ vpc.vpc.id }}"
          tags:
            Name: ig-public-sn2-m5
          cidr: 10.0.4.0/24
          state: present
        register: publicSubnet2
    - name: Create Private Subnet 1
        ec2_vpc_subnet:
          vpc_id: "{{ vpc.vpc.id }}"
          tags:
            Name: ig-private-sn1-m5
          cidr: 10.0.2.0/24
          state: present
        register: privateSubnet1
    - name: Create Private Subnet 2
        ec2_vpc_subnet:
          vpc_id: "{{ vpc.vpc.id }}"
          tags:
            Name: ig-private-sn2-m5
          cidr: 10.0.3.0/24
          state: present
        register: privateSubnet2
    - name: Create internet gateway for public vpc
      ec2_vpc_igw:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Name: ig-internet-gateway-m5
        state: present
      register: igw
    - name: debug
        debug: var=igw
    - name: Create public route table
      ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Name: ig-public-route-table-m5
        subnets:
          - "{{ publicSubnet1.subnet.id }}"
          - "{{ publicSubnet2.subnet.id }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ igw.gateway_id }}"
        state: present
      register: public_route_table
    - name: Create new nat gateway and allocate new EIP if a nat gateway does not yet exist in the subnet.
      ec2_vpc_nat_gateway:
        state: present
        subnet_id: "{{ privateSubnet1.subnet.id }}"
        wait: yes
        if_exist_do_not_create: true
        tags:
          Name: ig-nat-gateway-m5
      register: natGateway
    - name: debug
        debug: var=natGateway
    - name: Create private route table for subnet 1
        ec2_vpc_route_table:
          vpc_id: "{{ vpc.vpc.id }}"
          tags:
            Name: ig-private-route-table-1-m5
          subnets:
            - "{{ privateSubnet1.subnet.id }}"
          routes:
            - dest: 0.0.0.0/0
              gateway_id: "{{ natGateway.gateway_id }}"
          state: present
        register: private_route_table_1
    - name: Create private route table for subnet 2
        ec2_vpc_route_table:
          vpc_id: "{{ vpc.vpc.id }}"
          tags:
            Name: ig-private-route-table-2-m5
          subnets:
            - "{{ privateSubnet2.subnet.id }}"
          routes:
            - dest: 0.0.0.0/0
              gateway_id: "{{ natGateway.gateway_id }}"
          state: present
        register: private_route_table_2
    - name: Create ig-postgres security group for private RDS
      ec2_group:
        name: ig-postgres-m5
        description: Allow connections to user service from tagged machines
        vpc_id: "{{ vpc.vpc.id }}"
        rules:
          - proto: tcp
            ports:
              - 80
              - 443
            cidr_ip: 0.0.0.0/0
            rule_desc: allow all to port 80 and 443
          - proto: tcp
              ports:
                - 5432
              cidr_ip: 0.0.0.0/0
      register: igPostgresM5securityGroup
    - name: debug
        debug: var=igPostgresM5securityGroup
    - name: Create ig-postgres-tag security group for public ec2 instances
        ec2_group:
          name: ig-postgres-tag-m5
          description: Allow connections to user service from tagged machines
          vpc_id: "{{ vpc.vpc.id }}"
          rules:
            - proto: tcp
              ports:
                - 80
                - 443
                - 22
              cidr_ip: 0.0.0.0/0
              rule_desc: allow all to port 80 and 443 and 22
          rules_egress:
            - proto: tcp
                from_port: 5432
                to_port: 5432
                group_id: "{{ igPostgresM5securityGroup.group_id }}"
        register: igPostgresM5securityGroup
    - name: debug
        debug: var=igPostgresM5securityGroup